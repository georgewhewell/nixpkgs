# To build, use:
# nix-build nixos -I nixos-config=nixos/modules/installer/cd-dvd/sd-image-aarch64.nix -A config.system.build.sdImage
{ config, lib, pkgs, callPackage, recurseIntoAttrs, ... }:

let
  extlinux-conf-builder =
    import ../../system/boot/loader/generic-extlinux-compatible/extlinux-conf-builder.nix {
      inherit pkgs;
    };
  linux-4_11-nanopim3 = pkgs.callPackage ./linux-4.11-nanopim3.nix { };
  linuxPackages_4_11-nanopim3 = pkgs.recurseIntoAttrs (pkgs.linuxPackagesFor linux-4_11-nanopim3);
in
{
  imports = [
    ../../profiles/installation-device.nix
    ../../profiles/minimal.nix
    ./sd-image.nix
  ];

  assertions = lib.singleton {
    assertion = pkgs.stdenv.system == "aarch64-linux";
    message = "sd-image-aarch64.nix can be only built natively on Aarch64 / ARM64; " +
      "it cannot be cross compiled";
  };

  boot.loader.grub.enable = false;
  boot.loader.generic-extlinux-compatible.enable = true;
  boot.kernelPackages = linuxPackages_4_11-nanopim3;
  boot.initrd.availableKernelModules = [ "dm_mod" ];
  boot.kernelParams = ["earlyprintk" "console=ttySAC0,115200n8" "console=ttyS1"];
  boot.consoleLogLevel = 7;

  nixpkgs.config = {
     allowUnfree = true;
     platform = {
    name = "nanopi-m3";
    kernelMajor = "2.6"; # Using "2.6" enables 2.6 kernel syscalls in glibc.
    kernelHeadersBaseConfig = "defconfig";
    kernelBaseConfig = "nanopim3_defconfig";
    kernelArch = "arm64";
    kernelDTB = true;
    kernelAutoModules = true;
    kernelPreferBuiltin = true;
    kernelExtraConfig = ''
     SND n
     BCMDHD n
     ZPOOL y
     Z3FOLD y  
     ZSWAP y
     CRYPTO_LZ4HC m
    '';
    uboot = null;
    kernelTarget = "Image";
    gcc = {
      arch = "armv8-a";
    };
  };
   };
  services.avahi.enable = true;

  # FIXME: this probably should be in installation-device.nix
  users.extraUsers.root.initialHashedPassword = "";

  sdImage = {
    populateBootCommands = let
      patchedUboot = pkgs.buildUBoot rec {
        src = pkgs.fetchFromGitHub {
          owner = "rafaello7";
          repo = "u-boot-nanopi-m3";
          rev = "bec6d06d29da2dfe20541d88795adb5d707c2a17";
          sha256 = "08phny3g9q8zv0782a8idc75i8cr4kx9asl636lfz2ipjfjxq52i";
        };
        patches = [ ./distro-config.patch ./distro-config-header.patch ];
        defconfig = "s5p6818_nanopim3_defconfig";
        targetPlatforms = ["aarch64-linux"];
        filesToInstall = ["u-boot.bin"];
      };
      nanopi-load = pkgs.callPackage ./nanopi-load.nix { };
      bl1-nanopi-m3 = pkgs.stdenv.mkDerivation rec {
  version="master";
  name = "bl1-nanopi-m3-${version}";

  src = pkgs.fetchFromGitHub {
    owner = "rafaello7";
    repo = "bl1-nanopi-m3";
    rev = "d65910ab6c510dc47a23e21e99262f4d5b468cea";
    sha256 = "0qhz2vpm3mcdf0n3z3gibqavhpghasiy8z6p6dd670l8ya69vhnm";
  };

  nativeBuildInputs = [ pkgs.binutils ];
  patches = [
   ./no-stack-protect.patch
   ./undefined-stuff.patch
   ./objcopy.patch
  ];

  buildPhase = ''
   make CROSS_TOOL=${pkgs.gcc}/bin/ OBJCOPY=${pkgs.binutils}/bin/objcopy
  '';

  installPhase = ''
   cp out/bl1-drone.bin $out
  '';

  hardeningDisable = [ "all" ];

     }; 
      configTxt = pkgs.writeText "config.txt" ''
      # DO NOT EDIT THIS FILE
      #
      # Please edit /boot/armbianEnv.txt to set supported parameters
      #

      setenv load_addr "0x44000000"
      setenv overlay_error "false"

      # default values
      setenv rootdev "/dev/mmcblk0p1"
      setenv verbosity "1"
      setenv console "both"
      setenv disp_mem_reserves "off"
      setenv disp_mode "1920x1080p60"
      setenv rootfstype "ext4"
      setenv docker_optimizations "on"

      # Print boot source
      itest.b *0x28 == 0x00 && echo "U-boot loaded from SD"
      itest.b *0x28 == 0x02 && echo "U-boot loaded from eMMC or secondary SD"
      itest.b *0x28 == 0x03 && echo "U-boot loaded from SPI"

      '';
      in ''
        echo "Starting to probe boot. OUT is: $out"
        echo "nanopi: $(ls -la)"
        echo "trying to run nano-shot load: ${nanopi-load}/bin/nanopi-load"
        echo "$(${nanopi-load}/bin/nanopi-load -o u-boot-nsih.bin ${patchedUboot}/u-boot.bin 0x43bffe00)"
        echo "nanoshit load ok"
        #cp ${bl1-nanopi-m3} boot/bl1.bin
        #cp u-boot-nsih.bin boot/u-boot-nish.bin
        #cp ${configTxt} boot/config.txt
        echo "Copying config"
        ${extlinux-conf-builder} -t 3 -c ${config.system.build.toplevel} -d ./boot
        echo "$out is: $(ls -la $out)"
        dd conv=notrunc if=${bl1-nanopi-m3} of=$out seek=1
        dd conv=notrunc if=u-boot-nsih.bin of=$out seek=64
        echo "$out is: $(ls -la $out)"
        echo "The Config is: ${config.system.build.toplevel}"
      '';
  };
}
